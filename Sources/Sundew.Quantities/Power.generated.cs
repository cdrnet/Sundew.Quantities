// --------------------------------------------------------------------------------------------------------------------
// <copyright file="Power.generated.cs" company="Hukano">
// Copyright (c) Hukano. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
// </copyright>
// --------------------------------------------------------------------------------------------------------------------

// <auto-generated />
namespace Sundew.Quantities
{
    using global::Sundew.Quantities.Engine;
    using global::Sundew.Quantities.Engine.Quantities;
    using global::Sundew.Quantities.Engine.Representations.Hierarchical.Units;
    using global::Sundew.Quantities.Engine.UnitSelection;
    using global::Sundew.Quantities.UnitSelection;
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Globalization;

    [GeneratedCode("Sundew.Quantities.Generator", "1.0.0.0")]
    public partial struct Power : IQuantity<Power, PowerUnitSelector>
    {
        private readonly double value;

        public Power(double value, SelectUnit<PowerUnitSelector> unitSelector)
            : this(value,  UnitBuilder.BuildUnit(unitSelector(new PowerUnitSelector())))
        {
        }

        public Power(IQuantity quantity)
            : this(quantity.Value, quantity.Unit)
        {
        }

        public Power(double value)
            : this(value, units => units.BaseUnit)
        {
        }

        public Power(double value, IUnit unit)
        {
            this.value = value;
            this.Unit = unit;
        }

        double IQuantity.Value => this.value;

        public IUnit Unit { get; }

        public static Power operator +(Power quantity)
        {
            return quantity;
        }

        public static Power operator -(Power quantity)
        {
            return new Power(-quantity.value, quantity.Unit);
        }

        public static Power operator ++(Power quantity)
        {
            return new Power(quantity.value + 1, quantity.Unit);
        }

        public static Power operator --(Power quantity)
        {
            return new Power(quantity.value - 1, quantity.Unit);
        }

        public static Power operator +(Power lhs, double rhs)
        {
            return new Power(lhs.value + rhs, lhs.Unit);
        }

        public static Power operator -(Power lhs, double rhs)
        {
            return new Power(lhs.value - rhs, lhs.Unit);
        }

        public static Power operator *(Power lhs, double rhs)
        {
            return new Power(lhs.value * rhs, lhs.Unit);
        }

        public static Power operator /(Power lhs, double rhs)
        {
            return new Power(lhs.value / rhs, lhs.Unit);
        }

        public static Power operator +(Power lhs, Power rhs)
        {
            return new Power(QuantityOperations.Add(lhs, rhs));
        }

        public static Power operator -(Power lhs, Power rhs)
        {
            return new Power(QuantityOperations.Subtract(lhs, rhs));
        }

        public static double operator /(Power lhs, Power rhs)
        {
            return QuantityOperations.Divide(lhs, rhs).Value;
        }

        public static bool operator ==(Power lhs, Power rhs)
        {
            return QuantityHelper.AreEqual(lhs, rhs);
        }

        public static bool operator !=(Power lhs, Power rhs)
        {
            return !QuantityHelper.AreEqual(lhs, rhs);
        }

        public static bool operator >=(Power lhs, Power rhs)
        {
            return QuantityHelper.CompareTo(lhs, rhs) >= 0;
        }

        public static bool operator <=(Power lhs, Power rhs)
        {
            return QuantityHelper.CompareTo(lhs, rhs) <= 0;
        }

        public static bool operator >(Power lhs, Power rhs)
        {
            return QuantityHelper.CompareTo(lhs, rhs) > 0;
        }

        public static bool operator <(Power lhs, Power rhs)
        {
            return QuantityHelper.CompareTo(lhs, rhs) < 0;
        }

        public static Interval<Power> Interval(double min, double max, SelectUnit<PowerUnitSelector> unitSelector)
        {
            return new Interval<Power>(min, max, unitSelector(new PowerUnitSelector()));
        }

        public Squared<Power> Squared()
        {
            return new Squared<Power>(this);
        }

        public Cubed<Power> Cubed()
        {
            return new Cubed<Power>(this);
        }

        public double ToDouble(IUnit unit)
        {
            return QuantityOperations.ConvertToUnit(this, unit);
        }

        public IQuantity ToQuantity(IUnit unit)
        {
            return this.ToUnit(unit);
        }

        public Power ToUnit(IUnit unit)
        {
            return new Power(this.ToDouble(unit), unit);
        }

        public Power ToUnit(SelectUnit<PowerUnitSelector> unitSelector)
        {
            return this.ToUnit(UnitBuilder.BuildUnit(unitSelector(new PowerUnitSelector())));
        }

        public double ToDouble(SelectUnit<PowerUnitSelector> unitSelector)
        {
            return this.ToDouble(UnitBuilder.BuildUnit(unitSelector(new PowerUnitSelector())));
        }

        public override int GetHashCode()
        {
            return QuantityHelper.GetHashCode(this);
        }

        public override bool Equals(object obj)
        {
            return QuantityHelper.AreEqual(this, obj);
        }

        public bool Equals(IQuantity quantity)
        {
            return QuantityHelper.AreEqual(this, quantity);
        }

        public bool Equals(Power quantity)
        {
            return QuantityHelper.AreEqual(this, quantity);
        }

        public int CompareTo(object obj)
        {
            return QuantityHelper.CompareTo<Power>(this, obj);
        }

        public int CompareTo(IQuantity quantity)
        {
            return QuantityHelper.CompareTo(this, quantity);
        }

        public int CompareTo(Power quantity)
        {
            return QuantityHelper.CompareTo(this, quantity);
        }

        public override string ToString()
        {
            return this.ToString(CultureInfo.CurrentCulture);
        }

        public string ToString(UnitFormat unitFormat)
        {
            return this.ToString(unitFormat, null, CultureInfo.CurrentCulture);
        }

        public string ToString(string format)
        {
            return this.ToString(format, CultureInfo.CurrentCulture);
        }

        public string ToString(IFormatProvider formatProvider)
        {
            return this.ToString(null, formatProvider);
        }

        public string ToString(UnitFormat unitFormat, string format)
        {
            return this.ToString(unitFormat, format, CultureInfo.CurrentCulture);
        }

        public string ToString(UnitFormat unitFormat, IFormatProvider formatProvider)
        {
            return this.ToString(unitFormat, null, formatProvider);
        }

        public string ToString(string format, IFormatProvider formatProvider)
        {
            return this.ToString(UnitFormat.Default, format, formatProvider);
        }

        public string ToString(UnitFormat unitFormat, string format, IFormatProvider formatProvider)
        {
            return QuantityHelper.ToString(
                this.Unit.FormatValue(this.value, format, formatProvider),
                UnitHelper.GetNotation(this.Unit, unitFormat));
        }

        public Power CreateQuantity(double value, IUnit unit)
        {
            return new Power(value, unit);
        }

        IQuantity IDeferredQuantity.GetResult()
        {
            return this;
        }

        PowerUnitSelector IQuantity<Power, PowerUnitSelector>.CreateUnitSelector()
        {
            return new PowerUnitSelector();
        }
    }
}