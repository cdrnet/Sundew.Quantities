// --------------------------------------------------------------------------------------------------------------------
// <copyright file="VelocityUnitSelector.generated.cs" company="Hukano">
// Copyright (c) Hukano. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
// </copyright>
// --------------------------------------------------------------------------------------------------------------------

// <auto-generated />
namespace Sundew.Quantities.UnitSelectors
{
    using global::Sundew.Quantities.Representations.Expressions;
    using global::Sundew.Quantities.Representations.Units;
    using global::Sundew.Quantities.UnitSelection;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Generic;

    /// <summary>
    /// UnitSelector for <see cref="Velocity"/>.
    /// </summary>
    [GeneratedCode("Sundew.Quantities.Generator.UnitSelectors.UnitSelectorGenerator", "1.0.0.0")]
    public class VelocityUnitSelector : IExponentSelector<IPrefixedVelocityUnitSelector>, IPrefixedVelocityUnitSelector
    {
        private int actualExponent = 1;

        private Prefix actualPrefix;

        /// <summary>
        /// Gets the base unit.
        /// </summary>
        /// <value>
        /// The base unit.
        /// </value>
        public Expression BaseUnit => UnitDefinitions.Velocity;

        /// <summary>
        /// Gets the default units.
        /// </summary>
        /// <returns>
        /// An <see cref="IEnumerable{IUnit}" />.
        /// </returns>
        public IEnumerable<IUnit> GetDefaultUnits()
        {
            yield return UnitDefinitions.Velocity;
        }

        /// <summary>
        /// Gets the square.
        /// </summary>
        /// <value>
        /// The square.
        /// </value>
        public IPrefixedVelocityUnitSelector Square => this.GetPrefixesAndUnits(2);

        /// <summary>
        /// Gets the cubic.
        /// </summary>
        /// <value>
        /// The cubic.
        /// </value>
        public IPrefixedVelocityUnitSelector Cubic => this.GetPrefixesAndUnits(3);

        /// <summary>
        /// Gets the quartic.
        /// </summary>
        /// <value>
        /// The quartic.
        /// </value>
        public IPrefixedVelocityUnitSelector Quartic => this.GetPrefixesAndUnits(4);

        /// <summary>
        /// Gets the quintic.
        /// </summary>
        /// <value>
        /// The quintic.
        /// </value>
        public IPrefixedVelocityUnitSelector Quintic => this.GetPrefixesAndUnits(5);

        /// <summary>
        /// Gets the yotta.
        /// </summary>
        /// <value>
        /// The yotta.
        /// </value>
        public IVelocityUnitSelector Yotta => this.GetUnits(Prefixes.Yotta);

        /// <summary>
        /// Gets the zetta.
        /// </summary>
        /// <value>
        /// The zetta.
        /// </value>
        public IVelocityUnitSelector Zetta => this.GetUnits(Prefixes.Zetta);

        /// <summary>
        /// Gets the exa.
        /// </summary>
        /// <value>
        /// The exa.
        /// </value>
        public IVelocityUnitSelector Exa => this.GetUnits(Prefixes.Exa);

        /// <summary>
        /// Gets the peta.
        /// </summary>
        /// <value>
        /// The peta.
        /// </value>
        public IVelocityUnitSelector Peta => this.GetUnits(Prefixes.Peta);

        /// <summary>
        /// Gets the tera.
        /// </summary>
        /// <value>
        /// The tera.
        /// </value>
        public IVelocityUnitSelector Tera => this.GetUnits(Prefixes.Tera);

        /// <summary>
        /// Gets the giga.
        /// </summary>
        /// <value>
        /// The giga.
        /// </value>
        public IVelocityUnitSelector Giga => this.GetUnits(Prefixes.Giga);

        /// <summary>
        /// Gets the mega.
        /// </summary>
        /// <value>
        /// The mega.
        /// </value>
        public IVelocityUnitSelector Mega => this.GetUnits(Prefixes.Mega);

        /// <summary>
        /// Gets the kilo.
        /// </summary>
        /// <value>
        /// The kilo.
        /// </value>
        public IVelocityUnitSelector Kilo => this.GetUnits(Prefixes.Kilo);

        /// <summary>
        /// Gets the hecto.
        /// </summary>
        /// <value>
        /// The hecto.
        /// </value>
        public IVelocityUnitSelector Hecto => this.GetUnits(Prefixes.Hecto);

        /// <summary>
        /// Gets the deca.
        /// </summary>
        /// <value>
        /// The deca.
        /// </value>
        public IVelocityUnitSelector Deca => this.GetUnits(Prefixes.Deca);

        /// <summary>
        /// Gets the deci.
        /// </summary>
        /// <value>
        /// The deci.
        /// </value>
        public IVelocityUnitSelector Deci => this.GetUnits(Prefixes.Deci);

        /// <summary>
        /// Gets the centi.
        /// </summary>
        /// <value>
        /// The centi.
        /// </value>
        public IVelocityUnitSelector Centi => this.GetUnits(Prefixes.Centi);

        /// <summary>
        /// Gets the milli.
        /// </summary>
        /// <value>
        /// The milli.
        /// </value>
        public IVelocityUnitSelector Milli => this.GetUnits(Prefixes.Milli);

        /// <summary>
        /// Gets the micro.
        /// </summary>
        /// <value>
        /// The micro.
        /// </value>
        public IVelocityUnitSelector Micro => this.GetUnits(Prefixes.Micro);

        /// <summary>
        /// Gets the nano.
        /// </summary>
        /// <value>
        /// The nano.
        /// </value>
        public IVelocityUnitSelector Nano => this.GetUnits(Prefixes.Nano);

        /// <summary>
        /// Gets the pico.
        /// </summary>
        /// <value>
        /// The pico.
        /// </value>
        public IVelocityUnitSelector Pico => this.GetUnits(Prefixes.Pico);

        /// <summary>
        /// Gets the femto.
        /// </summary>
        /// <value>
        /// The femto.
        /// </value>
        public IVelocityUnitSelector Femto => this.GetUnits(Prefixes.Femto);

        /// <summary>
        /// Gets the atto.
        /// </summary>
        /// <value>
        /// The atto.
        /// </value>
        public IVelocityUnitSelector Atto => this.GetUnits(Prefixes.Atto);

        /// <summary>
        /// Gets the zepto.
        /// </summary>
        /// <value>
        /// The zepto.
        /// </value>
        public IVelocityUnitSelector Zepto => this.GetUnits(Prefixes.Zepto);

        /// <summary>
        /// Gets the yocto.
        /// </summary>
        /// <value>
        /// The yocto.
        /// </value>
        public IVelocityUnitSelector Yocto => this.GetUnits(Prefixes.Yocto);

        /// <summary>
        /// Gets the meter expression.
        /// </summary>
        /// <value>
        /// The meter.
        /// </value>
        public Expression Meters => this.SpecifyUnit(UnitDefinitions.Meter);

        
        /// <summary>
        /// Gets the mile expression.
        /// </summary>
        /// <value>
        /// The mile.
        /// </value>
        public Expression Miles => this.SpecifyUnit(UnitDefinitions.Mile);

        
        /// <summary>
        /// Gets the feet expression.
        /// </summary>
        /// <value>
        /// The feet.
        /// </value>
        public Expression Feet => this.SpecifyUnit(UnitDefinitions.Foot);

        
        /// <summary>
        /// Gets the inches expression.
        /// </summary>
        /// <value>
        /// The inches.
        /// </value>
        public Expression Inches => this.SpecifyUnit(UnitDefinitions.Inch);

        
        /// <summary>
        /// Gets the nautical miles expression.
        /// </summary>
        /// <value>
        /// The nautical miles.
        /// </value>
        public Expression NauticalMiles => this.SpecifyUnit(UnitDefinitions.NauticalMile);

        
        /// <summary>
        /// Gets the yard expression.
        /// </summary>
        /// <value>
        /// The yard.
        /// </value>
        public Expression Yards => this.SpecifyUnit(UnitDefinitions.Yard);

        
        /// <summary>
        /// Gets the second expression.
        /// </summary>
        /// <value>
        /// The second.
        /// </value>
        public Expression Seconds => this.SpecifyUnit(UnitDefinitions.Second);

        
        /// <summary>
        /// Gets the year expression.
        /// </summary>
        /// <value>
        /// The year.
        /// </value>
        public Expression Years => this.SpecifyUnit(UnitDefinitions.Year);

        
        /// <summary>
        /// Gets the month expression.
        /// </summary>
        /// <value>
        /// The month.
        /// </value>
        public Expression Months => this.SpecifyUnit(UnitDefinitions.Month);

        
        /// <summary>
        /// Gets the week expression.
        /// </summary>
        /// <value>
        /// The week.
        /// </value>
        public Expression Weeks => this.SpecifyUnit(UnitDefinitions.Week);

        
        /// <summary>
        /// Gets the day expression.
        /// </summary>
        /// <value>
        /// The day.
        /// </value>
        public Expression Days => this.SpecifyUnit(UnitDefinitions.Day);

        
        /// <summary>
        /// Gets the minute expression.
        /// </summary>
        /// <value>
        /// The minute.
        /// </value>
        public Expression Minutes => this.SpecifyUnit(UnitDefinitions.Minute);

        
        /// <summary>
        /// Gets the hour expression.
        /// </summary>
        /// <value>
        /// The hour.
        /// </value>
        public Expression Hours => this.SpecifyUnit(UnitDefinitions.Hour);

        /// <summary>
        /// Specifies the prefix by the specified factor.
        /// </summary>
        /// <param name="factor">The factor.</param>
        /// <returns>The available units.</returns>
        public IVelocityUnitSelector By(double factor)
        {
            return this.GetUnits(new FactoredPrefix(factor));
        }

        /// <summary>
        /// Specifies the exponent.
        /// </summary>
        /// <param name="exponent">The exponent.</param>
        public void SpecifyExponent(int exponent)
        {
            this.actualExponent = exponent;
        }

        /// <summary>
        /// Specifies the prefix.
        /// </summary>
        /// <param name="prefix">The prefix.</param>
        public void SpecifyPrefix(Prefix prefix)
        {
            this.actualPrefix = prefix;
        }

        /// <summary>
        /// Selects the unit based on the specified magnitude, prefix and base unit.
        /// </summary>
        /// <param name="unit">The unit.</param>
        /// <returns>
        /// An <see cref="Expression"/>.
        /// </returns>
        public Expression SpecifyUnit(IUnit unit)
        {
            return UnitSelectorHelper.CreateExpression(ref this.actualExponent, ref this.actualPrefix, unit);
        }

        /// <summary>
        /// Gets the prefixes and unit selector.
        /// </summary>
        /// <param name="exponent">The exponent.</param>
        /// <returns>
        /// The available prefixes and units.
        /// </returns>
        private IPrefixedVelocityUnitSelector GetPrefixesAndUnits(int exponent)
        {
            this.SpecifyExponent(exponent);
            return this;
        }

        /// <summary>
        /// Gets the unit selector.
        /// </summary>
        /// <param name="prefix">The prefix.</param>
        /// <returns>The available units.</returns>
        private IVelocityUnitSelector GetUnits(Prefix prefix)
        {
            this.SpecifyPrefix(prefix);
            return this;
        }
    }
}