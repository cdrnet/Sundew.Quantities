// --------------------------------------------------------------------------------------------------------------------
// <copyright file="MassUnitSelector.generated.cs" company="Hukano">
// Copyright (c) Hukano. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
// </copyright>
// --------------------------------------------------------------------------------------------------------------------

// <auto-generated />
namespace Sundew.Quantities.UnitSelectors
{
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Generic;
    using global::Sundew.Quantities.Representations.Expressions;
    using global::Sundew.Quantities.Representations.Units;
    using global::Sundew.Quantities.UnitSelection;

    /// <summary>
    /// UnitSelector for <see cref="Mass"/>.
    /// </summary>
    [GeneratedCode("Sundew.Quantities.Generator.UnitSelectors.UnitSelectorGenerator", "1.0.0.0")]
    public class MassUnitSelector : IExponentSelector<IPrefixedMassUnitSelector>, IPrefixedMassUnitSelector
    {
        private int actualExponent = 1;

        private Prefix actualPrefix;

        /// <summary>
        /// Gets the base unit.
        /// </summary>
        /// <value>
        /// The base unit.
        /// </value>
        public Expression BaseUnit => UnitDefinitions.KiloGram;

        /// <summary>
        /// Gets the default units.
        /// </summary>
        /// <returns>
        /// An <see cref="IEnumerable{IUnit}" />.
        /// </returns>
        public IEnumerable<IUnit> GetDefaultUnits()
        {
            yield return UnitDefinitions.Gram;
            yield return UnitDefinitions.Tonne;
            yield return UnitDefinitions.ChineseMetricOunce;
            yield return UnitDefinitions.DutchMetricOunce;
            yield return UnitDefinitions.InternationalAvoirdupoisOunce;
            yield return UnitDefinitions.InternationalTroyOunce;
            yield return UnitDefinitions.MariaTheresaOunce;
            yield return UnitDefinitions.Ounce;
            yield return UnitDefinitions.SpanishOunce;
        }

        /// <summary>
        /// Gets the square.
        /// </summary>
        /// <value>
        /// The square.
        /// </value>
        public IPrefixedMassUnitSelector Square => this.GetPrefixesAndUnits(2);

        /// <summary>
        /// Gets the cubic.
        /// </summary>
        /// <value>
        /// The cubic.
        /// </value>
        public IPrefixedMassUnitSelector Cubic => this.GetPrefixesAndUnits(3);

        /// <summary>
        /// Gets the quartic.
        /// </summary>
        /// <value>
        /// The quartic.
        /// </value>
        public IPrefixedMassUnitSelector Quartic => this.GetPrefixesAndUnits(4);

        /// <summary>
        /// Gets the quintic.
        /// </summary>
        /// <value>
        /// The quintic.
        /// </value>
        public IPrefixedMassUnitSelector Quintic => this.GetPrefixesAndUnits(5);

        /// <summary>
        /// Gets the yotta.
        /// </summary>
        /// <value>
        /// The yotta.
        /// </value>
        public IMassUnitSelector Yotta => this.GetUnits(Prefixes.Yotta);

        /// <summary>
        /// Gets the zetta.
        /// </summary>
        /// <value>
        /// The zetta.
        /// </value>
        public IMassUnitSelector Zetta => this.GetUnits(Prefixes.Zetta);

        /// <summary>
        /// Gets the exa.
        /// </summary>
        /// <value>
        /// The exa.
        /// </value>
        public IMassUnitSelector Exa => this.GetUnits(Prefixes.Exa);

        /// <summary>
        /// Gets the peta.
        /// </summary>
        /// <value>
        /// The peta.
        /// </value>
        public IMassUnitSelector Peta => this.GetUnits(Prefixes.Peta);

        /// <summary>
        /// Gets the tera.
        /// </summary>
        /// <value>
        /// The tera.
        /// </value>
        public IMassUnitSelector Tera => this.GetUnits(Prefixes.Tera);

        /// <summary>
        /// Gets the giga.
        /// </summary>
        /// <value>
        /// The giga.
        /// </value>
        public IMassUnitSelector Giga => this.GetUnits(Prefixes.Giga);

        /// <summary>
        /// Gets the mega.
        /// </summary>
        /// <value>
        /// The mega.
        /// </value>
        public IMassUnitSelector Mega => this.GetUnits(Prefixes.Mega);

        /// <summary>
        /// Gets the kilo.
        /// </summary>
        /// <value>
        /// The kilo.
        /// </value>
        public IMassUnitSelector Kilo => this.GetUnits(Prefixes.Kilo);

        /// <summary>
        /// Gets the hecto.
        /// </summary>
        /// <value>
        /// The hecto.
        /// </value>
        public IMassUnitSelector Hecto => this.GetUnits(Prefixes.Hecto);

        /// <summary>
        /// Gets the deca.
        /// </summary>
        /// <value>
        /// The deca.
        /// </value>
        public IMassUnitSelector Deca => this.GetUnits(Prefixes.Deca);

        /// <summary>
        /// Gets the deci.
        /// </summary>
        /// <value>
        /// The deci.
        /// </value>
        public IMassUnitSelector Deci => this.GetUnits(Prefixes.Deci);

        /// <summary>
        /// Gets the centi.
        /// </summary>
        /// <value>
        /// The centi.
        /// </value>
        public IMassUnitSelector Centi => this.GetUnits(Prefixes.Centi);

        /// <summary>
        /// Gets the milli.
        /// </summary>
        /// <value>
        /// The milli.
        /// </value>
        public IMassUnitSelector Milli => this.GetUnits(Prefixes.Milli);

        /// <summary>
        /// Gets the micro.
        /// </summary>
        /// <value>
        /// The micro.
        /// </value>
        public IMassUnitSelector Micro => this.GetUnits(Prefixes.Micro);

        /// <summary>
        /// Gets the nano.
        /// </summary>
        /// <value>
        /// The nano.
        /// </value>
        public IMassUnitSelector Nano => this.GetUnits(Prefixes.Nano);

        /// <summary>
        /// Gets the pico.
        /// </summary>
        /// <value>
        /// The pico.
        /// </value>
        public IMassUnitSelector Pico => this.GetUnits(Prefixes.Pico);

        /// <summary>
        /// Gets the femto.
        /// </summary>
        /// <value>
        /// The femto.
        /// </value>
        public IMassUnitSelector Femto => this.GetUnits(Prefixes.Femto);

        /// <summary>
        /// Gets the atto.
        /// </summary>
        /// <value>
        /// The atto.
        /// </value>
        public IMassUnitSelector Atto => this.GetUnits(Prefixes.Atto);

        /// <summary>
        /// Gets the zepto.
        /// </summary>
        /// <value>
        /// The zepto.
        /// </value>
        public IMassUnitSelector Zepto => this.GetUnits(Prefixes.Zepto);

        /// <summary>
        /// Gets the yocto.
        /// </summary>
        /// <value>
        /// The yocto.
        /// </value>
        public IMassUnitSelector Yocto => this.GetUnits(Prefixes.Yocto);

        /// <summary>
        /// Gets the kilo gram expression.
        /// </summary>
        /// <value>
        /// The kilo gram.
        /// </value>
        public Expression KiloGrams => this.SpecifyUnit(UnitDefinitions.KiloGram);

        
        /// <summary>
        /// Gets the gram expression.
        /// </summary>
        /// <value>
        /// The gram.
        /// </value>
        public Expression Grams => this.SpecifyUnit(UnitDefinitions.Gram);

        
        /// <summary>
        /// Gets the tonne expression.
        /// </summary>
        /// <value>
        /// The tonne.
        /// </value>
        public Expression Tonnes => this.SpecifyUnit(UnitDefinitions.Tonne);

        
        /// <summary>
        /// Gets the chinese metric ounce expression.
        /// </summary>
        /// <value>
        /// The chinese metric ounce.
        /// </value>
        public Expression ChineseMetricOunces => this.SpecifyUnit(UnitDefinitions.ChineseMetricOunce);

        
        /// <summary>
        /// Gets the dutch metric ounce expression.
        /// </summary>
        /// <value>
        /// The dutch metric ounce.
        /// </value>
        public Expression DutchMetricOunces => this.SpecifyUnit(UnitDefinitions.DutchMetricOunce);

        
        /// <summary>
        /// Gets the international avoirdupois ounce expression.
        /// </summary>
        /// <value>
        /// The international avoirdupois ounce.
        /// </value>
        public Expression InternationalAvoirdupoisOunces => this.SpecifyUnit(UnitDefinitions.InternationalAvoirdupoisOunce);

        
        /// <summary>
        /// Gets the international troy ounce expression.
        /// </summary>
        /// <value>
        /// The international troy ounce.
        /// </value>
        public Expression InternationalTroyOunces => this.SpecifyUnit(UnitDefinitions.InternationalTroyOunce);

        
        /// <summary>
        /// Gets the maria theresa ounce expression.
        /// </summary>
        /// <value>
        /// The maria theresa ounce.
        /// </value>
        public Expression MariaTheresaOunces => this.SpecifyUnit(UnitDefinitions.MariaTheresaOunce);

        
        /// <summary>
        /// Gets the ounce expression.
        /// </summary>
        /// <value>
        /// The ounce.
        /// </value>
        public Expression Ounces => this.SpecifyUnit(UnitDefinitions.Ounce);

        
        /// <summary>
        /// Gets the spanish ounce expression.
        /// </summary>
        /// <value>
        /// The spanish ounce.
        /// </value>
        public Expression SpanishOunces => this.SpecifyUnit(UnitDefinitions.SpanishOunce);

        /// <summary>
        /// Specifies the prefix by the specified factor.
        /// </summary>
        /// <param name="factor">The factor.</param>
        /// <returns>The available units.</returns>
        public IMassUnitSelector By(double factor)
        {
            return this.GetUnits(new FactoredPrefix(factor));
        }

        /// <summary>
        /// Specifies the exponent.
        /// </summary>
        /// <param name="exponent">The exponent.</param>
        public void SpecifyExponent(int exponent)
        {
            this.actualExponent = exponent;
        }

        /// <summary>
        /// Specifies the prefix.
        /// </summary>
        /// <param name="prefix">The prefix.</param>
        public void SpecifyPrefix(Prefix prefix)
        {
            this.actualPrefix = prefix;
        }

        /// <summary>
        /// Selects the unit based on the specified magnitude, prefix and base unit.
        /// </summary>
        /// <param name="unit">The unit.</param>
        /// <returns>
        /// An <see cref="Expression"/>.
        /// </returns>
        public Expression SpecifyUnit(IUnit unit)
        {
            return UnitSelectorHelper.CreateExpression(ref this.actualExponent, ref this.actualPrefix, unit);
        }

        /// <summary>
        /// Gets the prefixes and unit selector.
        /// </summary>
        /// <param name="exponent">The exponent.</param>
        /// <returns>
        /// The available prefixes and units.
        /// </returns>
        private IPrefixedMassUnitSelector GetPrefixesAndUnits(int exponent)
        {
            this.SpecifyExponent(exponent);
            return this;
        }

        /// <summary>
        /// Gets the unit selector.
        /// </summary>
        /// <param name="prefix">The prefix.</param>
        /// <returns>The available units.</returns>
        private IMassUnitSelector GetUnits(Prefix prefix)
        {
            this.SpecifyPrefix(prefix);
            return this;
        }
    }
}