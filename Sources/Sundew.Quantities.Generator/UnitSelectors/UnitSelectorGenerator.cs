// --------------------------------------------------------------------------------------------------------------------
// <copyright file="UnitSelectorGenerator.cs" company="Hukano">
// Copyright (c) Hukano. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
// </copyright>
// --------------------------------------------------------------------------------------------------------------------

namespace Sundew.Quantities.Generator.UnitSelectors
{
    using System.Collections.Generic;
    using System.Text;
    using Sundew.Code.Generation.CSharp;
    using Sundew.Text.Generation;
    using Sundew.Text.Generation.Common;

    public class UnitSelectorGenerator : IGenerator<CodeSetup, CodeGeneratorSetup, QuantityModel>
    {
        public IReadOnlyList<Run> Prepare(CodeSetup codeSetup, CodeGeneratorSetup codeGeneratorSetup, QuantityModel model, string modelPath)
        {
            return new[]
            {
                new Run(
                    NameGenerator.GetFolderPath(codeSetup, codeGeneratorSetup),
                    NameGenerator.GetFileName($"{model.Name}UnitSelector", codeSetup, codeGeneratorSetup))
            };
        }

        public string Generate(CodeSetup codeSetup, CodeGeneratorSetup codeGeneratorSetup, QuantityModel model, OutputInfo outputInfo)
        {
            return new IndentedString($@"
// --------------------------------------------------------------------------------------------------------------------
// <copyright file=""{outputInfo.FileName}"" company=""Hukano"">
// Copyright (c) Hukano. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
// </copyright>
// --------------------------------------------------------------------------------------------------------------------

// <auto-generated />
namespace {NamespaceGenerator.GetNamespace(outputInfo.TargetInfo.FilePath, outputInfo.FolderPath)}
{{
{UsingsGenerator.GetUsings(codeSetup.UseGlobalUsings | codeGeneratorSetup.UseGlobalUsings, 4, codeSetup.Usings, codeGeneratorSetup.Usings)}

    /// <summary>
    /// UnitSelector for <see cref=""{model.Name}""/>.
    /// </summary>
    [GeneratedCode(""{this.GetType().FullName}"", ""{this.GetType().Assembly.GetName().Version}"")]
    public class {model.Name}UnitSelector : IExponentSelector<{PrefixesGenerator.GetPrefixesAndUnitsInterface(model)}>, {PrefixesGenerator.GetPrefixesAndUnitsInterface(model)}
    {{
        private int actualExponent = 1;

        private Prefix actualPrefix;

        /// <summary>
        /// Gets the base unit.
        /// </summary>
        /// <value>
        /// The base unit.
        /// </value>
        public Expression BaseUnit => UnitDefinitions.{model.BaseUnit};

        /// <summary>
        /// Gets the default units.
        /// </summary>
        /// <returns>
        /// An <see cref=""IEnumerable{{IUnit}}"" />.
        /// </returns>
        public IEnumerable<IUnit> GetDefaultUnits()
        {{
            {this.GetDefaultUnits(model.DefaultUnits)}
        }}

{ExponentsGenerator.Generate(model)}

{PrefixesGenerator.Generate(model)}

{UnitsGenerator.Generate(model)}

        /// <summary>
        /// Specifies the prefix by the specified factor.
        /// </summary>
        /// <param name=""factor"">The factor.</param>
        /// <returns>The available units.</returns>
        public {PrefixesGenerator.GetUnitsInterface(model)} By(double factor)
        {{
            return this.GetUnits(new FactoredPrefix(factor));
        }}

        /// <summary>
        /// Specifies the exponent.
        /// </summary>
        /// <param name=""exponent"">The exponent.</param>
        public void SpecifyExponent(int exponent)
        {{
            this.actualExponent = exponent;
        }}

        /// <summary>
        /// Specifies the prefix.
        /// </summary>
        /// <param name=""prefix"">The prefix.</param>
        public void SpecifyPrefix(Prefix prefix)
        {{
            this.actualPrefix = prefix;
        }}

        /// <summary>
        /// Selects the unit based on the specified magnitude, prefix and base unit.
        /// </summary>
        /// <param name=""unit"">The unit.</param>
        /// <returns>
        /// An <see cref=""Expression""/>.
        /// </returns>
        public Expression SpecifyUnit(IUnit unit)
        {{
            return UnitSelectorHelper.CreateExpression(ref this.actualExponent, ref this.actualPrefix, unit);
        }}

        /// <summary>
        /// Gets the prefixes and unit selector.
        /// </summary>
        /// <param name=""exponent"">The exponent.</param>
        /// <returns>
        /// The available prefixes and units.
        /// </returns>
        private {PrefixesGenerator.GetPrefixesAndUnitsInterface(model)} GetPrefixesAndUnits(int exponent)
        {{
            this.SpecifyExponent(exponent);
            return this;
        }}

        /// <summary>
        /// Gets the unit selector.
        /// </summary>
        /// <param name=""prefix"">The prefix.</param>
        /// <returns>The available units.</returns>
        private {PrefixesGenerator.GetUnitsInterface(model)} GetUnits(Prefix prefix)
        {{
            this.SpecifyPrefix(prefix);
            return this;
        }}
    }}
}}
");
        }

        private IndentedString GetDefaultUnits(IReadOnlyList<string> modelDefaultUnits)
        {
            if (modelDefaultUnits == null)
            {
                return new IndentedString(12, "yield return this.BaseUnit;");
            }

            var stringBuilder = new StringBuilder();
            foreach (var defaultUnit in modelDefaultUnits)
            {
                stringBuilder.AppendLine($"yield return UnitDefinitions.{defaultUnit};");
            }

            return new IndentedString(12, stringBuilder.ToString());
        }
    }
}