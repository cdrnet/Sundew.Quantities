// --------------------------------------------------------------------------------------------------------------------
// <copyright file="PrefixedUnitSelectorInterfaceGenerator.cs" company="Hukano">
// Copyright (c) Hukano. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
// </copyright>
// --------------------------------------------------------------------------------------------------------------------

namespace Sundew.Quantities.Generator.UnitSelectors
{
    using System.Collections.Generic;
    using Sundew.Generator;
    using Sundew.Generator.Common;
    using Sundew.Generator.MSBuild;
    using Sundew.Generator.MSBuild.CSharp;

    public class PrefixedUnitSelectorInterfaceGenerator : IGenerator<ICodeSetup, ICodeGeneratorSetup, IProject, IQuantityModel, ITextOutput>
    {
        public IReadOnlyList<IRun> Prepare(ICodeSetup codeSetup, ICodeGeneratorSetup codeGeneratorSetup, IProject target, IQuantityModel model, string modelPath)
        {
            return new[]
            {
                new Run(
                    NameHelper.GetFolderPath(codeSetup, codeGeneratorSetup),
                    NameHelper.GetFileName($"IPrefixed{model.Name}UnitSelector", codeSetup, codeGeneratorSetup)),
            };
        }

        public ITextOutput Generate(ICodeSetup codeSetup, ICodeGeneratorSetup codeGeneratorSetup, IProject target, IQuantityModel model, IRun run, long index)
        {
            return new TextOutput($@"
// --------------------------------------------------------------------------------------------------------------------
// <copyright file=""{run.FileName}"" company=""Hukano"">
// Copyright (c) Hukano. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
// </copyright>
// --------------------------------------------------------------------------------------------------------------------

// <auto-generated />
namespace {NamespaceHelper.GetNamespace(target.RootNamespace, run.FolderPath)}
{{
{UsingsHelper.GetUsings(codeSetup.UseGlobalUsings | codeGeneratorSetup.UseGlobalUsings, 4, codeSetup.Usings, codeGeneratorSetup.Usings)}

    /// <summary>
    /// Interface for <see cref=""{model.Name}""/> unit selector.
    /// </summary>
    [GeneratedCode(""{this.GetType().FullName}"", ""{this.GetType().Assembly.GetName().Version}"")]
    public interface IPrefixed{model.Name}UnitSelector : IPrefixSelector<I{model.Name}UnitSelector>, I{model.Name}UnitSelector 
    {{
    }}
}}
");
        }
    }
}