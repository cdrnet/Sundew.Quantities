// --------------------------------------------------------------------------------------------------------------------
// <copyright file="QuantityGenerator.cs" company="Hukano">
// Copyright (c) Hukano. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
// </copyright>
// --------------------------------------------------------------------------------------------------------------------

namespace Sundew.Quantities.Generator.Quantities
{
    using System.Collections.Generic;
    using Sundew.Code.Generation.CSharp;
    using Sundew.Text.Generation;
    using Sundew.Text.Generation.Common;

    public class QuantityGenerator : IGenerator<CodeSetup, CodeGeneratorSetup, QuantityModel>
    {
        public IReadOnlyList<Run> Prepare(CodeSetup codeSetup, CodeGeneratorSetup codeGeneratorSetup, QuantityModel model, string modelPath)
        {
            return new[]
            {
                new Run(NameGenerator.GetFolderPath(codeSetup, codeGeneratorSetup),
                    NameGenerator.GetFileName(model.Name, codeSetup, codeGeneratorSetup))
            };
        }

        public string Generate(CodeSetup codeSetup, CodeGeneratorSetup codeGeneratorSetup, QuantityModel model, OutputInfo outputInfo)
        {
            return
$@"
// --------------------------------------------------------------------------------------------------------------------
// <copyright file=""{outputInfo.FileName}"" company=""Hukano"">
// Copyright (c) Hukano. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
// </copyright>
// --------------------------------------------------------------------------------------------------------------------

// <auto-generated />
namespace {NamespaceGenerator.GetNamespace(outputInfo.TargetInfo.FilePath, outputInfo.FolderPath)}
{{
{UsingsGenerator.GetUsings(codeSetup.UseGlobalUsings | codeGeneratorSetup.UseGlobalUsings | model.UseGlobalUsings, 4, codeSetup.Usings, codeGeneratorSetup.Usings, model.Usings)}

    [GeneratedCode(""{this.GetType().FullName}"", ""{this.GetType().Assembly.GetName().Version}"")]
    public partial struct {model.Name} : IQuantity<{model.Name}, {model.Name}UnitSelector>
    {{
        private readonly double value;

{ConstructorsGenerator.GetConstructors(model)}

        /// <summary>
        /// Gets the value.
        /// </summary>
        /// <value>
        /// The value.
        /// </value>
        double IQuantity.Value => this.value;

        /// <summary>
        /// Gets the unit.
        /// </summary>
        /// <value>
        /// The unit.
        /// </value>
        public IUnit Unit {{ get; }}

{StandardOperationsGenerator.GetStandardOperations(model)}

{ConversionOperationsGenerator.GetConversionOperations(model)}

{EqualityOperationsGenerator.GetEqualityOperations(model)}

{FormattingOperationsGenerator.GetToStringOperations(model)}

        /// <summary>
        /// Creates the quantity.
        /// </summary>
        /// <param name=""value"">The quantity value.</param>
        /// <param name=""unit"">The quantity unit.</param>
        /// <returns>
        /// A <see cref=""{model.Name}"" />.
        /// </returns>
        public {model.Name} CreateQuantity(double value, IUnit unit)
        {{
            return new {model.Name}(value, unit);
        }}

        /// <summary>
        /// Gets the result.
        /// </summary>
        /// <returns>
        /// An <see cref=""IQuantity"" />.
        /// </returns>
        IQuantity IDeferredQuantity.GetResult()
        {{
            return this;
        }}

        /// <summary>
        /// Creates the unit selector.
        /// </summary>
        /// <returns>
        /// A unit selector.
        /// </returns>
        {model.Name}UnitSelector IQuantity<{model.Name}, {model.Name}UnitSelector>.CreateUnitSelector()
        {{
            return new {model.Name}UnitSelector();
        }}
    }}
}}
";
        }
    }
}